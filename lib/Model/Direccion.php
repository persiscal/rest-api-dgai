<?php
/**
 * Direccion
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SAI Sistema de Administracion de Infracciones - Acta Digital
 *
 * VersiÃƒÂ³n REST del web service de DGAI que recibe acta de infracciones para incorporarlas al SAI.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: scarabetta@buenosaires.gob.ar
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Direccion Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Direccion implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Direccion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'calle' => 'string',
        'altura' => 'string',
        'piso' => 'string',
        'depto' => 'string',
        'entre_calle1' => 'string',
        'entre_calle2' => 'string',
        'referencia' => 'string',
        'cp' => 'string',
        'localidad' => 'string',
        'provincia' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'calle' => null,
        'altura' => null,
        'piso' => null,
        'depto' => null,
        'entre_calle1' => null,
        'entre_calle2' => null,
        'referencia' => null,
        'cp' => null,
        'localidad' => null,
        'provincia' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'calle' => 'calle',
        'altura' => 'altura',
        'piso' => 'piso',
        'depto' => 'depto',
        'entre_calle1' => 'entreCalle1',
        'entre_calle2' => 'entreCalle2',
        'referencia' => 'referencia',
        'cp' => 'cp',
        'localidad' => 'localidad',
        'provincia' => 'provincia'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'calle' => 'setCalle',
        'altura' => 'setAltura',
        'piso' => 'setPiso',
        'depto' => 'setDepto',
        'entre_calle1' => 'setEntreCalle1',
        'entre_calle2' => 'setEntreCalle2',
        'referencia' => 'setReferencia',
        'cp' => 'setCp',
        'localidad' => 'setLocalidad',
        'provincia' => 'setProvincia'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'calle' => 'getCalle',
        'altura' => 'getAltura',
        'piso' => 'getPiso',
        'depto' => 'getDepto',
        'entre_calle1' => 'getEntreCalle1',
        'entre_calle2' => 'getEntreCalle2',
        'referencia' => 'getReferencia',
        'cp' => 'getCp',
        'localidad' => 'getLocalidad',
        'provincia' => 'getProvincia'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['calle'] = isset($data['calle']) ? $data['calle'] : null;
        $this->container['altura'] = isset($data['altura']) ? $data['altura'] : null;
        $this->container['piso'] = isset($data['piso']) ? $data['piso'] : null;
        $this->container['depto'] = isset($data['depto']) ? $data['depto'] : null;
        $this->container['entre_calle1'] = isset($data['entre_calle1']) ? $data['entre_calle1'] : null;
        $this->container['entre_calle2'] = isset($data['entre_calle2']) ? $data['entre_calle2'] : null;
        $this->container['referencia'] = isset($data['referencia']) ? $data['referencia'] : null;
        $this->container['cp'] = isset($data['cp']) ? $data['cp'] : null;
        $this->container['localidad'] = isset($data['localidad']) ? $data['localidad'] : null;
        $this->container['provincia'] = isset($data['provincia']) ? $data['provincia'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['calle'] === null) {
            $invalidProperties[] = "'calle' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets calle
     *
     * @return string
     */
    public function getCalle()
    {
        return $this->container['calle'];
    }

    /**
     * Sets calle
     *
     * @param string $calle calle
     *
     * @return $this
     */
    public function setCalle($calle)
    {
        $this->container['calle'] = $calle;

        return $this;
    }

    /**
     * Gets altura
     *
     * @return string
     */
    public function getAltura()
    {
        return $this->container['altura'];
    }

    /**
     * Sets altura
     *
     * @param string $altura altura
     *
     * @return $this
     */
    public function setAltura($altura)
    {
        $this->container['altura'] = $altura;

        return $this;
    }

    /**
     * Gets piso
     *
     * @return string
     */
    public function getPiso()
    {
        return $this->container['piso'];
    }

    /**
     * Sets piso
     *
     * @param string $piso piso
     *
     * @return $this
     */
    public function setPiso($piso)
    {
        $this->container['piso'] = $piso;

        return $this;
    }

    /**
     * Gets depto
     *
     * @return string
     */
    public function getDepto()
    {
        return $this->container['depto'];
    }

    /**
     * Sets depto
     *
     * @param string $depto depto
     *
     * @return $this
     */
    public function setDepto($depto)
    {
        $this->container['depto'] = $depto;

        return $this;
    }

    /**
     * Gets entre_calle1
     *
     * @return string
     */
    public function getEntreCalle1()
    {
        return $this->container['entre_calle1'];
    }

    /**
     * Sets entre_calle1
     *
     * @param string $entre_calle1 entre_calle1
     *
     * @return $this
     */
    public function setEntreCalle1($entre_calle1)
    {
        $this->container['entre_calle1'] = $entre_calle1;

        return $this;
    }

    /**
     * Gets entre_calle2
     *
     * @return string
     */
    public function getEntreCalle2()
    {
        return $this->container['entre_calle2'];
    }

    /**
     * Sets entre_calle2
     *
     * @param string $entre_calle2 entre_calle2
     *
     * @return $this
     */
    public function setEntreCalle2($entre_calle2)
    {
        $this->container['entre_calle2'] = $entre_calle2;

        return $this;
    }

    /**
     * Gets referencia
     *
     * @return string
     */
    public function getReferencia()
    {
        return $this->container['referencia'];
    }

    /**
     * Sets referencia
     *
     * @param string $referencia referencia
     *
     * @return $this
     */
    public function setReferencia($referencia)
    {
        $this->container['referencia'] = $referencia;

        return $this;
    }

    /**
     * Gets cp
     *
     * @return string
     */
    public function getCp()
    {
        return $this->container['cp'];
    }

    /**
     * Sets cp
     *
     * @param string $cp cp
     *
     * @return $this
     */
    public function setCp($cp)
    {
        $this->container['cp'] = $cp;

        return $this;
    }

    /**
     * Gets localidad
     *
     * @return string
     */
    public function getLocalidad()
    {
        return $this->container['localidad'];
    }

    /**
     * Sets localidad
     *
     * @param string $localidad localidad
     *
     * @return $this
     */
    public function setLocalidad($localidad)
    {
        $this->container['localidad'] = $localidad;

        return $this;
    }

    /**
     * Gets provincia
     *
     * @return string
     */
    public function getProvincia()
    {
        return $this->container['provincia'];
    }

    /**
     * Sets provincia
     *
     * @param string $provincia provincia
     *
     * @return $this
     */
    public function setProvincia($provincia)
    {
        $this->container['provincia'] = $provincia;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


