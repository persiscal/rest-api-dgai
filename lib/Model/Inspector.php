<?php
/**
 * Inspector
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SAI Sistema de Administracion de Infracciones - Acta Digital
 *
 * VersiÃ³n REST del web service de DGAI que recibe acta de infracciones para incorporarlas al SAI.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: scarabetta@buenosaires.gob.ar
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Inspector Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Inspector implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Inspector';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'nombres' => 'string',
        'apellidos' => 'string',
        'legajo' => 'string',
        'equipo' => '\Swagger\Client\Model\Equipo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'nombres' => null,
        'apellidos' => null,
        'legajo' => null,
        'equipo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'nombres' => 'nombres',
        'apellidos' => 'apellidos',
        'legajo' => 'legajo',
        'equipo' => 'equipo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'nombres' => 'setNombres',
        'apellidos' => 'setApellidos',
        'legajo' => 'setLegajo',
        'equipo' => 'setEquipo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'nombres' => 'getNombres',
        'apellidos' => 'getApellidos',
        'legajo' => 'getLegajo',
        'equipo' => 'getEquipo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['nombres'] = isset($data['nombres']) ? $data['nombres'] : null;
        $this->container['apellidos'] = isset($data['apellidos']) ? $data['apellidos'] : null;
        $this->container['legajo'] = isset($data['legajo']) ? $data['legajo'] : null;
        $this->container['equipo'] = isset($data['equipo']) ? $data['equipo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['nombres'] === null) {
            $invalidProperties[] = "'nombres' can't be null";
        }
        if ((mb_strlen($this->container['nombres']) > 30)) {
            $invalidProperties[] = "invalid value for 'nombres', the character length must be smaller than or equal to 30.";
        }

        if ($this->container['apellidos'] === null) {
            $invalidProperties[] = "'apellidos' can't be null";
        }
        if ((mb_strlen($this->container['apellidos']) > 30)) {
            $invalidProperties[] = "invalid value for 'apellidos', the character length must be smaller than or equal to 30.";
        }

        if ($this->container['legajo'] === null) {
            $invalidProperties[] = "'legajo' can't be null";
        }
        if ((mb_strlen($this->container['legajo']) > 10)) {
            $invalidProperties[] = "invalid value for 'legajo', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['equipo'] === null) {
            $invalidProperties[] = "'equipo' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nombres
     *
     * @return string
     */
    public function getNombres()
    {
        return $this->container['nombres'];
    }

    /**
     * Sets nombres
     *
     * @param string $nombres nombres
     *
     * @return $this
     */
    public function setNombres($nombres)
    {
        if ((mb_strlen($nombres) > 30)) {
            throw new \InvalidArgumentException('invalid length for $nombres when calling Inspector., must be smaller than or equal to 30.');
        }

        $this->container['nombres'] = $nombres;

        return $this;
    }

    /**
     * Gets apellidos
     *
     * @return string
     */
    public function getApellidos()
    {
        return $this->container['apellidos'];
    }

    /**
     * Sets apellidos
     *
     * @param string $apellidos apellidos
     *
     * @return $this
     */
    public function setApellidos($apellidos)
    {
        if ((mb_strlen($apellidos) > 30)) {
            throw new \InvalidArgumentException('invalid length for $apellidos when calling Inspector., must be smaller than or equal to 30.');
        }

        $this->container['apellidos'] = $apellidos;

        return $this;
    }

    /**
     * Gets legajo
     *
     * @return string
     */
    public function getLegajo()
    {
        return $this->container['legajo'];
    }

    /**
     * Sets legajo
     *
     * @param string $legajo legajo
     *
     * @return $this
     */
    public function setLegajo($legajo)
    {
        if ((mb_strlen($legajo) > 10)) {
            throw new \InvalidArgumentException('invalid length for $legajo when calling Inspector., must be smaller than or equal to 10.');
        }

        $this->container['legajo'] = $legajo;

        return $this;
    }

    /**
     * Gets equipo
     *
     * @return \Swagger\Client\Model\Equipo
     */
    public function getEquipo()
    {
        return $this->container['equipo'];
    }

    /**
     * Sets equipo
     *
     * @param \Swagger\Client\Model\Equipo $equipo equipo
     *
     * @return $this
     */
    public function setEquipo($equipo)
    {
        $this->container['equipo'] = $equipo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


